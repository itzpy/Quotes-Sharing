-- Table for quotes
CREATE TABLE quotes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  text TEXT NOT NULL,
  author VARCHAR(255) NOT NULL,
  posted_by VARCHAR(255) NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  likes_count INTEGER DEFAULT 0
);

-- Table for comments
CREATE TABLE comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  quote_id BIGINT REFERENCES quotes(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security (RLS)
ALTER TABLE quotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- RLS policies
-- Allow anyone to read quotes
CREATE POLICY "Anyone can read quotes" 
  ON quotes FOR SELECT 
  USING (true);

-- Allow authenticated users to insert quotes
CREATE POLICY "Authenticated users can insert quotes" 
  ON quotes FOR INSERT 
  TO authenticated 
  WITH CHECK (true);

-- Allow users to update only their quotes
CREATE POLICY "Users can update their own quotes" 
  ON quotes FOR UPDATE 
  TO authenticated 
  USING (auth.uid() = user_id);

-- Allow users to delete only their quotes
CREATE POLICY "Users can delete their own quotes" 
  ON quotes FOR DELETE 
  TO authenticated 
  USING (auth.uid() = user_id);

-- Allow anyone to read comments
CREATE POLICY "Anyone can read comments" 
  ON comments FOR SELECT 
  USING (true);

-- Allow anyone to insert comments (including anonymous)
CREATE POLICY "Anyone can insert comments" 
  ON comments FOR INSERT 
  USING (true);

-- Allow users to update only their comments
CREATE POLICY "Users can update their own comments" 
  ON comments FOR UPDATE 
  TO authenticated 
  USING (auth.uid() = user_id);

-- Allow users to delete only their comments
CREATE POLICY "Users can delete their own comments" 
  ON comments FOR DELETE 
  TO authenticated 
  USING (auth.uid() = user_id OR auth.uid() IN (
    SELECT user_id FROM quotes WHERE quotes.id = quote_id
  ));

-- Index for faster lookups
CREATE INDEX idx_comments_quote_id ON comments(quote_id);
